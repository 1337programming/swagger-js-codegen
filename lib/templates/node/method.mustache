/*
 * {{&summary}}
 * @method
 * @name {{&className}}#{{&methodName}}
{{#parameters}}
 * @param {{=<% %>=}}{{<%&type%>}}<%={{ }}=%> {{&camelCaseName}} - {{&description}}
{{/parameters}}
 * 
 */
 this.{{&methodName}} = function(parameters){
    var deferred = Q.defer();

    var path = '{{&path}}';

    {{#singletons}}
    var {{&name}} = '{{&value}}';
    {{/singletons}}
    
    var body;
    var queryParameters = {};
    var headers = {};

    {{#parameters}}
        {{#required}}
        if(parameters.{{&camelCaseName}} === undefined){
            deferred.reject(new Error('Missing required {{&paramType}} parameter: {{&camelCaseName}}'));
            return deferred.promise;
        }
        {{/required}}
        
        {{#isQueryParameter}}
            queryParameters['{{&name}}'] = parameters.{{&camelCaseName}};
        {{/isQueryParameter}}
        
        {{#isPathParameter}}
            path = path.replace('{{=<% %>=}}{{<%&name%>}}<%={{ }}=%>', parameters.{{&camelCaseName}});
        {{/isPathParameter}}
        
        {{#isHeaderParameter}}
            headers[{{&name}}] = parameters.{{&camelCaseName}};
        {{/isHeaderParameter}}
        
        {{#isBodyParameter}}
            body = parameters.{{&camelCaseName}};
        {{/isBodyParameter}}
    {{/parameters}}

    request({
        method: '{{method}}', 
        uri: domain + path,
        qs: queryParameters,
        headers: headers,
        body: body
    }, function(error, response, body){
        if(error) {
            deferred.reject(error);
        } else {
            if(/^application\/(.*\\+)?json/.test(response.headers['content-type'])) {
                try {
                    body = JSON.parse(body);
                } catch(e) {
                
                }
            }
            if(response.statusCode >= 200 && response.statusCode <= 299) {
               deferred.resolve({ response: response, body: body });
            } else {
               deferred.reject({ response: response, body: body });
            }
        }
    });
    
    return deferred.promise; 
 };